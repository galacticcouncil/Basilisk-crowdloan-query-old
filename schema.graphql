
type Auction @entity {
  id: ID! #id is a required field
  blockNum: Int!
  status: String! @index
  bids: [Bid]! @derivedFrom(field: "auction")
  # winningBids: [WinningBid]! @derivedFrom(field: "auction")
  leaseStart: Int
  slotsStart: Int!
  leaseEnd: Int
  slotsEnd: Int!
  closingStart: Int!
  closingEnd: Int!
  resultBlock: Int
  ongoing: Boolean! @index
  parachainLeases: [ParachainLeases] @derivedFrom(field: "auction")
}

# type Account @entity {
#   id: ID!
#   isFund: Boolean!
# }

type Parachain @entity {
  id: ID!
  paraId: Int!
  createdAt: Date
  creationBlock: Int
  deregistered: Boolean! @index
  deposit: BigInt!
  manager: String!
  leases: [ParachainLeases] @derivedFrom(field: "parachain")
  bids: [Bid] @derivedFrom(field: "parachain")
  funds: [Crowdloan] @derivedFrom(field: "parachain")
  # activeFund: Crowdloan
  # latestBid: Bid
  chronicle: Chronicle
}

type Crowdloan @entity {
  id: ID! # generated fund address
  parachain: Parachain! @index
  depositor: String!
  verifier: String
  cap: BigInt!
  raised: BigInt!
  lockExpiredBlock: Int!
  blockNum: Int
  firstSlot: Int!
  lastSlot: Int!
  status: String! @index
  leaseExpiredBlock: Int
  dissolvedBlock: Int
  updatedAt: Date
  createdAt: Date
  isFinished: Boolean @index
  wonAuctionId: String @index 
  contributions: [Contribution] @derivedFrom(field: "fund")
  # list of past balances a.k.a. funds raised aggregated every several blocks
  aggregatedBalances: [AggregatedCrowdloanBalance] @derivedFrom(field: "fund")
  aggregatedBids: [AggregatedParachainBid] @derivedFrom(field: "fund")
}

type AuctionParachain @entity {
  id: ID!
  auction: Auction!
  parachain: Parachain!
  blockNum: Int!
  createdAt: Date!
  firstSlot: Int!
  lastSlot: Int!
}

type ParachainLeases @entity {
  id: ID! # paraId-leaseRange-auction
  paraId: Int!
  parachain: Parachain! @index
  leaseRange: String! @index #auctionId-start-end
  firstLease: Int!
  lastLease: Int!
  latestBidAmount: BigInt!
  auction: Auction @index
  activeForAuction: String @index #auctionId or 'sudo'
  winningAmount: BigInt
  extraAmount: BigInt
  wonBidFrom: String
  numBlockWon: Int
  winningResultBlock: Int
  hasWon: Boolean!
}

type Bid @entity {
  id: ID!
  auction: Auction! @index
  winningAuction: Int @index # auctionId
  blockNum: Int!
  parachain: Parachain! @index
  isCrowdloan: Boolean!
  amount: BigInt!
  fund: Crowdloan @index
  firstSlot: Int!
  lastSlot: Int!
  bidder: String
  createdAt: Date!
}

type Contribution @entity {
  id: ID!
  account: String!
  parachain: Parachain!
  fund: Crowdloan!
  amount: BigInt!
  blockNum: Int!
  createdAt: Date!
}

type Chronicle @entity {
  id: ID! # Static 'ChronicleKey'
  curAuction: Auction
  curBlockNum: Int
  curLease: Int
  curLeaseStart: Int
  curLeaseEnd: Int,
  lastAggregatedBalanceBlockNum: Int
  lastAggregatedBidsBlockNum: Int
  lastSignificantIncentive: Int
  parachains: [Parachain] @derivedFrom(field: "chronicle")
}

type CrowdloanSequence @entity {
  id: ID!
  curIndex: Int!
  createdAt: Date!
  blockNum: Int!
}

type AggregatedCrowdloanBalance @entity {
  id: ID!
  parachain: Parachain!
  fund: Crowdloan! @index
  raised: BigInt!
  blockNum: Int!
  createdAt: Date!
}

type AggregatedParachainBid @entity {
  id: ID!
  parachain: Parachain! @index
  fund: Crowdloan @index
  amount: BigInt!
  blockNum: Int!
  createdAt: Date!
}

type Incentive @entity {
  id: ID!
  blockNum: Int! @index
  bsxMultiplier: Int! 
  hdxBonus: Int!
  significant: Boolean! @index
  siblingParachainId: String @index
}